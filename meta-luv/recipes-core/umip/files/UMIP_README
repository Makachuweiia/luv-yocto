A quick guide for UMIP testing

* Use umip_test for a very basic test that exercises the instructions smsw,
  str, sidt, sldt and sgdt from protected mode using the global descriptor
  table.
* Use test2_32 for a collection of tests that exercises the instructions
  str, sldt and smsw for register and memory operands. For registers,
  operand sizes are of 16 and 32 bits. Memory operands are always 16-bits
  long. Addresses in these tests are computed using only the ModRM
  byte. Also, these tests use the normal __USER_DS segment with a base
  address of zero.
* DEPRECATED. Now UMIP is made to support only 32-bit builds of the kernel.
  Use test2_64 for a collection of tests that exercises the instructions
  str, sldt and smsw for register and memory operands. For registers,
  operand sizes are of 16, 32 and 64 bits. Memory operands are always
  16-bit long. Addresses in these tests are computed using only the ModRM
  byte. Also, these tests use the normal __USER_DS segment with a base
  address of zero.
* Use umip_exceptions to verify that a page fault is correctly issued when
  UMIP-emulated code tries to write in an invalid memory address of the user
  space memory.
* Use umip_ldt to verify all the possible 32-bit address encodings in the
  UMIP-emulated instructions. This includes all the ModRM, and SiB displacement
  combinations. Furthermore, this test configure a Local Descriptor Table
  whose segments have base addresses that are different from the __USER_DS
  segment.
* Use umip_ldt_16 to verify all the possible 16-bit address encodings in the
  UMIP-emulated instructions. This includes all the ModRM and displacement
  combinations. Furthermore, this test configure a Local Descriptor Table
  whose segments have base addresses that are different from the __USER_DS
  segment. Also, the code segment is configured for 16-bit addresses.
